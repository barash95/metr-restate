<?php

namespace DoctrineORMModule\Proxy\__CG__\Admin\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Resident extends \Admin\Entity\Resident implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'id', 'name', 'tittle', 'description', 'tittle1', 'tittle2', 'tittle3', 'description1', 'description2', 'description3', 'metro', 'address', 'housing', 'total_flat', 'state'];
        }

        return ['__isInitialized__', 'id', 'name', 'tittle', 'description', 'tittle1', 'tittle2', 'tittle3', 'description1', 'description2', 'description3', 'metro', 'address', 'housing', 'total_flat', 'state'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Resident $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getTittle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTittle', []);

        return parent::getTittle();
    }

    /**
     * {@inheritDoc}
     */
    public function setTittle($tittle)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTittle', [$tittle]);

        return parent::setTittle($tittle);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', []);

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription($description)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', [$description]);

        return parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function getTittle1()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTittle1', []);

        return parent::getTittle1();
    }

    /**
     * {@inheritDoc}
     */
    public function setTittle1($tittle1)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTittle1', [$tittle1]);

        return parent::setTittle1($tittle1);
    }

    /**
     * {@inheritDoc}
     */
    public function getTittle2()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTittle2', []);

        return parent::getTittle2();
    }

    /**
     * {@inheritDoc}
     */
    public function setTittle2($tittle2)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTittle2', [$tittle2]);

        return parent::setTittle2($tittle2);
    }

    /**
     * {@inheritDoc}
     */
    public function getTittle3()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTittle3', []);

        return parent::getTittle3();
    }

    /**
     * {@inheritDoc}
     */
    public function setTittle3($tittle3)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTittle3', [$tittle3]);

        return parent::setTittle3($tittle3);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription1()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription1', []);

        return parent::getDescription1();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription1($description1)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription1', [$description1]);

        return parent::setDescription1($description1);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription2()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription2', []);

        return parent::getDescription2();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription2($description2)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription2', [$description2]);

        return parent::setDescription2($description2);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription3()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription3', []);

        return parent::getDescription3();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription3($description3)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription3', [$description3]);

        return parent::setDescription3($description3);
    }

    /**
     * {@inheritDoc}
     */
    public function getMetro()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMetro', []);

        return parent::getMetro();
    }

    /**
     * {@inheritDoc}
     */
    public function setMetro($metro)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMetro', [$metro]);

        return parent::setMetro($metro);
    }

    /**
     * {@inheritDoc}
     */
    public function getAddress()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAddress', []);

        return parent::getAddress();
    }

    /**
     * {@inheritDoc}
     */
    public function setAddress($address)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAddress', [$address]);

        return parent::setAddress($address);
    }

    /**
     * {@inheritDoc}
     */
    public function getHousing()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHousing', []);

        return parent::getHousing();
    }

    /**
     * {@inheritDoc}
     */
    public function setHousing($housing)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHousing', [$housing]);

        return parent::setHousing($housing);
    }

    /**
     * {@inheritDoc}
     */
    public function getTotalFlat()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTotalFlat', []);

        return parent::getTotalFlat();
    }

    /**
     * {@inheritDoc}
     */
    public function setTotalFlat($total_flat)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTotalFlat', [$total_flat]);

        return parent::setTotalFlat($total_flat);
    }

    /**
     * {@inheritDoc}
     */
    public function getImage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getImage', []);

        return parent::getImage();
    }

    /**
     * {@inheritDoc}
     */
    public function getImage1()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getImage1', []);

        return parent::getImage1();
    }

    /**
     * {@inheritDoc}
     */
    public function getImage2()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getImage2', []);

        return parent::getImage2();
    }

    /**
     * {@inheritDoc}
     */
    public function getImage3()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getImage3', []);

        return parent::getImage3();
    }

    /**
     * {@inheritDoc}
     */
    public function getState()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getState', []);

        return parent::getState();
    }

    /**
     * {@inheritDoc}
     */
    public function setState($state)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setState', [$state]);

        return parent::setState($state);
    }

    /**
     * {@inheritDoc}
     */
    public function getStateAsString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStateAsString', []);

        return parent::getStateAsString();
    }

}
